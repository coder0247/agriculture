{"version":3,"sources":["webpack:///./src/app/service/msg.service.ts","webpack:///./src/app/service/pager.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse , HttpHeaders} from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};\r\n\r\nconst apiUrl = '/api/';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MsgService {\r\n\r\n  constructor(private http: HttpClient ) { }\r\n  getInboxMsg(userid): Observable<any> {\r\n    const data = {\r\n      userid: userid\r\n    };\r\n    return this.http.post(apiUrl + 'inbox', data, httpOptions)\r\n    .pipe(\r\n        map(this.extractData),\r\n        catchError(this.handleError)\r\n    );\r\n  }\r\n  getSentMsg(userid): Observable<any> {\r\n    const data = {\r\n      userid: userid\r\n    };\r\n    return this.http.post(apiUrl + 'sent', data, httpOptions)\r\n    .pipe(\r\n        map(this.extractData),\r\n        catchError(this.handleError)\r\n    );\r\n  }\r\n  getMsg(msgid, endpoint): Observable<any> {\r\n    return this.http.get(apiUrl + endpoint + msgid, httpOptions).pipe(\r\n        map(this.extractData),\r\n        catchError(this.handleError)\r\n    );\r\n  }\r\n   postMsg(data): Observable<any> {\r\n    return this.http.post(apiUrl + 'postmsg', data, httpOptions)\r\n      .pipe(\r\n        map(this.extractData),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // getProducts(): Observable<any> {\r\n  //   return this.http.get(apiUrl, httpOptions).pipe(\r\n  //     map(this.extractData),\r\n  //     catchError(this.handleError));\r\n  // }\r\n\r\n  // getProduct(id: string): Observable<any> {\r\n  //   const url = `${apiUrl}/${id}`;\r\n  //   return this.http.get(url, httpOptions).pipe(\r\n  //     map(this.extractData),\r\n  //     catchError(this.handleError));\r\n  // }\r\n\r\n  // postProduct(data): Observable<any> {\r\n  //   return this.http.post(apiUrl, data, httpOptions)\r\n  //     .pipe(\r\n  //       catchError(this.handleError)\r\n  //     );\r\n  // }\r\n\r\n  // updateProduct(data): Observable<any> {\r\n  //   return this.http.put(apiUrl, data, httpOptions)\r\n  //     .pipe(\r\n  //       catchError(this.handleError)\r\n  //     );\r\n  // }\r\n\r\n  // deleteProduct(id: string): Observable<{}> {\r\n  //   const url = `${apiUrl}/${id}`;\r\n  //   return this.http.delete(url, httpOptions)\r\n  //     .pipe(\r\n  //       catchError(this.handleError)\r\n  //     );\r\n  // }\r\n  private extractData(res: Response) {\r\n    const body = res;\r\n    return body || { };\r\n  }\r\n  private handleError(error: HttpErrorResponse ) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    // return an observable with a user-facing error message\r\n    return throwError('Something bad happened; please try again later.');\r\n  }\r\n}\r\n","export class PagerService {\r\n    getPager(totalItems: number, currentPage: number = 1, pageSize: number = 10) {\r\n        // calculate total pages\r\n        const totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n        // ensure current page isn't out of range\r\n        if (currentPage < 1) {\r\n            currentPage = 1;\r\n        } else if (currentPage > totalPages) {\r\n            currentPage = totalPages;\r\n        }\r\n\r\n        let startPage: number, endPage: number;\r\n        if (totalPages <= 10) {\r\n            // less than 10 total pages so show all\r\n            startPage = 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            // more than 10 total pages so calculate start and end pages\r\n            if (currentPage <= 6) {\r\n                startPage = 1;\r\n                endPage = 10;\r\n            } else if (currentPage + 4 >= totalPages) {\r\n                startPage = totalPages - 9;\r\n                endPage = totalPages;\r\n            } else {\r\n                startPage = currentPage - 5;\r\n                endPage = currentPage + 4;\r\n            }\r\n        }\r\n\r\n        // calculate start and end item indexes\r\n        const startIndex = (currentPage - 1) * pageSize;\r\n        const endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n        // create an array of pages to ng-repeat in the pager control\r\n        const pages = Array.from(Array((endPage + 1) - startPage).keys()).map(i => startPage + i);\r\n\r\n        // return object with all pager properties required by the view\r\n        return {\r\n            totalItems: totalItems,\r\n            currentPage: currentPage,\r\n            pageSize: pageSize,\r\n            totalPages: totalPages,\r\n            startPage: startPage,\r\n            endPage: endPage,\r\n            startIndex: startIndex,\r\n            endIndex: endIndex,\r\n            pages: pages\r\n        };\r\n    }\r\n}\r\n"],"sourceRoot":""}